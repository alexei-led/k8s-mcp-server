name: Integration Tests

on:
  # Run on pull requests that aren't just docs/deployment changes
  pull_request:
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - 'deploy/docker/**'

  # Manual trigger
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the workflow with tmate debugging enabled'
        required: false
        default: false
        type: boolean

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip integration]')"
    
    strategy:
      matrix:
        python-version: ["3.13"]
      # Don't cancel other matrix jobs if one fails
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: |
          # Install uv using the official installation method
          curl -LsSf https://astral.sh/uv/install.sh | sh

          # Add uv to PATH
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies using uv
        run: |
          # Install dependencies using uv with the lock file and the --system flag
          uv pip install --system -e ".[dev]"

      - name: Install KWOK tool
        run: |
          # KWOK repository
          KWOK_REPO=kubernetes-sigs/kwok
          # Get latest
          KWOK_LATEST_RELEASE=$(curl "https://api.github.com/repos/${KWOK_REPO}/releases/latest" | jq -r '.tag_name')
          
          wget -O kwokctl -c "https://github.com/${KWOK_REPO}/releases/download/${KWOK_LATEST_RELEASE}/kwokctl-linux-amd64"
          chmod +x kwokctl
          sudo mv kwokctl /usr/local/bin/kwokctl

      - name: Create KWOK Cluster
        run: |
          # Create a KWOK cluster for testing with specific Kubernetes version
          kwokctl create cluster --name=kwok-test --wait=1m
          
          # Set KUBECONFIG environment variable
          echo "KUBECONFIG=$(kwokctl get kubeconfig --name=kwok-test)" >> $GITHUB_ENV
          
      - name: Install K8s CLI tools
        run: |
          # Install Helm
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          
          # Install istioctl (latest version)
          ISTIO_VERSION=$(curl -sL https://github.com/istio/istio/releases/latest | grep -o "v[0-9]\+\.[0-9]\+\.[0-9]\+" | head -1)
          curl -L https://istio.io/downloadIstio | ISTIO_VERSION=${ISTIO_VERSION} sh -
          sudo mv istio-${ISTIO_VERSION}/bin/istioctl /usr/local/bin/
          
          # Install ArgoCD CLI
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64
          
          # Verify all tools are installed
          echo "Verifying installed CLI tools:"
          kubectl version --client
          helm version
          istioctl version --remote=false
          argocd version --client

      - name: Setup tmate debug session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
        with:
          limit-access-to-actor: true

      - name: Run integration tests
        run: |
          # Run integration tests with the KWOK cluster
          # Set environment variable to use the cluster we created directly
          export K8S_MCP_TEST_USE_KWOK=false  # We already created the cluster
          export K8S_MCP_TEST_USE_EXISTING_CLUSTER=true
          
          # Run the tests
          pytest -v -m integration
      
      - name: Cleanup KWOK Cluster
        if: always()
        run: |
          kwokctl delete cluster --name=kwok-test